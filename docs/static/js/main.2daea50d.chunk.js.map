{"version":3,"sources":["Table/useDecoratedColumns.ts","Table/useTable.ts","Table/TableColumn.ts","ExampleTable/ExampleTableColumns.tsx","GenericTable.tsx","App.tsx","index.tsx"],"names":["useDecoratedColumns","columns","useState","sortColumn","setSort","decoratedColumns","map","column","sort","sortFn","useTable","data","dataState","setState","sortedDataState","rows","setRows","TableColumn","HeaderComponent","BodyComponent","label","ActionColumnBody","item","config","onClick","action","ActionColumnHeader","NameColumnBody","name","NameColumnHeader","CountColumnBody","props","index","CountColumnHeader","CountColumn","NameTableColumn","a","b","localeCompare","ActionTableColumn","alert","ExampleTable","row","i","indexOf","count","nameColumn","actionColumn","anotherActionColumn","App","rows1","columns1","rows2","columns2","GenericTable","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2daea50d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { TableColumn } from './TableColumn';\n\nexport interface DecoratedColumn<D> extends TableColumn<D> {\n  sort(): void;\n}\n\nconst useDecoratedColumns = <D>(columns: TableColumn<D>[]) => {\n  const [sortColumn, setSort] = useState<TableColumn<D> | null>(null);\n  const decoratedColumns = columns.map(column => ({\n    ...column,\n    sort: function() {\n      if (!sortColumn) {\n        if (column.sortFn) return setSort(column)\n      }\n  \n      return setSort(null)\n    }\n  } as DecoratedColumn<D>))\n\n  return { decoratedColumns, sortColumn };\n}\n\nexport default useDecoratedColumns;","import { useState } from 'react';\nimport { Item } from '../data';\nimport { TableColumn } from './TableColumn';\nimport useDecoratedColumns from './useDecoratedColumns';\n\nconst useTable = (data: Item[], columns: TableColumn<Item>[]) => {\n\n  const [dataState, setState] = useState(data);\n\n  let sortedDataState = dataState;\n  const { decoratedColumns, sortColumn } = useDecoratedColumns(columns)\n\n  if (sortColumn && sortColumn.sortFn) {\n    sortedDataState = [...sortedDataState].sort(sortColumn.sortFn)\n  } else {\n    sortedDataState = dataState;\n  }\n\n  return { rows: sortedDataState, columns: decoratedColumns, setRows: setState }\n}\n\nexport default useTable","export type SortFn<D> = (b: D, a: D) => number;\n\nexport interface TableColumnProps {\n  label: string;\n}\n\nexport interface TableColumnHeaderParams<T = TableColumnProps> {\n  config: T;\n}\n\nexport interface TableColumnBodyParams<T extends TableColumnProps, D> {\n  item: D;\n  index: number;\n  config: T;\n}\n\nexport abstract class TableColumn<D> implements TableColumnProps {\n  abstract HeaderComponent: React.ComponentType<any>;\n  abstract BodyComponent: React.ComponentType<any>;\n\n  label: string = '';\n\n  sortFn: SortFn<D> | null = null;\n}\n","import { Item } from '../data';\nimport { TableColumn, TableColumnBodyParams, TableColumnHeaderParams } from '../Table';\nimport { DecoratedColumn } from '../Table/useDecoratedColumns';\n\nexport interface ActionTableColumn {\n  action(item: Item): void;\n}\n\ntype TableColumnItem = TableColumn<Item>;\n\ntype NameColumnBodyParams = TableColumnBodyParams<TableColumnItem, Item>\ntype NameColumnHeaderParams = TableColumnHeaderParams<DecoratedColumn<Item>>\n\n const ActionColumnBody: React.ComponentType<TableColumnBodyParams<ActionTableColumn, Item>> = ({ item, config }) => {\n  return <button onClick={() => config.action(item)}>{config.label}</button>\n}\n\n const ActionColumnHeader: React.ComponentType<TableColumnHeaderParams> = ({ config }) => {\n  return <>{config.label}</>\n}\n\n const NameColumnBody: React.ComponentType<NameColumnBodyParams> = ({ item }) => {\n  return <>{item.name}</>\n}\n\n const NameColumnHeader: React.ComponentType<NameColumnHeaderParams> = ({ config }) => {\n  return <button onClick={config.sort}>{config.label}</button>\n}\n\n const CountColumnBody: React.ComponentType<TableColumnBodyParams<TableColumnItem, Item>> = (props) => {\n  return <>{props.index + 1}.</>\n}\n\nconst CountColumnHeader: React.ComponentType<TableColumnHeaderParams> = () => <></>;\n\nexport class CountColumn extends TableColumn<Item> {\n  public BodyComponent = CountColumnBody;\n  public HeaderComponent = CountColumnHeader;\n\n  constructor(public label: string) {\n    super()\n  }\n}\n\nexport class NameTableColumn extends TableColumn<Item> {\n  public BodyComponent = NameColumnBody;\n  public HeaderComponent = NameColumnHeader;\n\n  constructor(public label: string) {\n    super()\n  }\n\n  sortFn = (a: Item, b: Item) => {\n    return b.name.localeCompare(a.name)\n  }\n}\n\nexport class ActionTableColumn extends TableColumn<Item> {\n  public BodyComponent = ActionColumnBody;\n  public HeaderComponent = ActionColumnHeader;\n\n  constructor(public label: string) {\n    super();\n  }\n\n  action = (item: Item) => {\n    alert(`${item.name} ${this.label}!`);\n  }\n}","import { TableColumn } from './Table/TableColumn';\n\nconst ExampleTable: React.ComponentType<{ \n  rows: any[];\n  data: any[];\n  columns: TableColumn<any>[]\n}> = ({ rows, columns, data }) => {\n\n  return <table>\n    <thead>\n      <tr>{\n        columns.map(column => (\n          <th key={column.label}>\n            <column.HeaderComponent config={column} />\n          </th>\n        ))\n      }</tr>\n    </thead>\n    <tbody>\n      {rows.map((row, index) => {\n        return (\n          <tr key={index}>{\n            columns.map((column, i) => {\n              return (\n                <td key={column.label}>\n                  <column.BodyComponent item={row} config={column} index={data.indexOf(row)} />\n                </td>\n              )\n            })\n          }</tr>\n        )\n      })}\n    </tbody>\n  </table>\n}\n\nexport default ExampleTable;","import data from \"./data.json\";\nimport useTable from './Table/useTable';\nimport { ActionTableColumn, CountColumn, NameTableColumn } from './ExampleTable/ExampleTableColumns';\nimport GenericTable from './GenericTable';\n\nconst count = new CountColumn('');\nconst nameColumn = new NameTableColumn('name');\nconst actionColumn = new ActionTableColumn('action');\nconst anotherActionColumn = new ActionTableColumn('another action');\n\nfunction App() {\n  const { rows: rows1 , columns: columns1 } = useTable(data, [count, nameColumn, actionColumn, anotherActionColumn])\n  const { rows: rows2 , columns: columns2 } = useTable(data, [count, nameColumn, actionColumn])\n\n  return (\n    <div>\n      <GenericTable rows={rows1} data={data} columns={columns1} />\n      <GenericTable rows={rows2} data={data} columns={columns2} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}